/*
 * rds_postgresql
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.byteplus.rdspostgresql.model;

import java.util.Objects;
import java.util.Arrays;
import com.byteplus.rdspostgresql.model.AddressObjectForDescribeDBInstancesOutput;
import com.byteplus.rdspostgresql.model.ReadOnlyNodeWeightForDescribeDBInstancesOutput;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * EndpointForDescribeDBInstancesOutput
 */



public class EndpointForDescribeDBInstancesOutput {
  @SerializedName("Address")
  private List<AddressObjectForDescribeDBInstancesOutput> address = null;

  @SerializedName("AutoAddNewNodes")
  private String autoAddNewNodes = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("EnableReadOnly")
  private String enableReadOnly = null;

  @SerializedName("EnableReadWriteSplitting")
  private String enableReadWriteSplitting = null;

  @SerializedName("EndpointId")
  private String endpointId = null;

  @SerializedName("EndpointName")
  private String endpointName = null;

  @SerializedName("EndpointType")
  private String endpointType = null;

  @SerializedName("ReadOnlyNodeDistributionType")
  private String readOnlyNodeDistributionType = null;

  @SerializedName("ReadOnlyNodeMaxDelayTime")
  private Integer readOnlyNodeMaxDelayTime = null;

  @SerializedName("ReadOnlyNodeWeight")
  private List<ReadOnlyNodeWeightForDescribeDBInstancesOutput> readOnlyNodeWeight = null;

  @SerializedName("ReadWriteMode")
  private String readWriteMode = null;

  @SerializedName("ReadWriteProxyConnection")
  private Integer readWriteProxyConnection = null;

  @SerializedName("WriteNodeHaltWriting")
  private Boolean writeNodeHaltWriting = null;

  public EndpointForDescribeDBInstancesOutput address(List<AddressObjectForDescribeDBInstancesOutput> address) {
    this.address = address;
    return this;
  }

  public EndpointForDescribeDBInstancesOutput addAddressItem(AddressObjectForDescribeDBInstancesOutput addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<AddressObjectForDescribeDBInstancesOutput>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @Valid
  @Schema(description = "")
  public List<AddressObjectForDescribeDBInstancesOutput> getAddress() {
    return address;
  }

  public void setAddress(List<AddressObjectForDescribeDBInstancesOutput> address) {
    this.address = address;
  }

  public EndpointForDescribeDBInstancesOutput autoAddNewNodes(String autoAddNewNodes) {
    this.autoAddNewNodes = autoAddNewNodes;
    return this;
  }

   /**
   * Get autoAddNewNodes
   * @return autoAddNewNodes
  **/
  @Schema(description = "")
  public String getAutoAddNewNodes() {
    return autoAddNewNodes;
  }

  public void setAutoAddNewNodes(String autoAddNewNodes) {
    this.autoAddNewNodes = autoAddNewNodes;
  }

  public EndpointForDescribeDBInstancesOutput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public EndpointForDescribeDBInstancesOutput enableReadOnly(String enableReadOnly) {
    this.enableReadOnly = enableReadOnly;
    return this;
  }

   /**
   * Get enableReadOnly
   * @return enableReadOnly
  **/
  @Schema(description = "")
  public String getEnableReadOnly() {
    return enableReadOnly;
  }

  public void setEnableReadOnly(String enableReadOnly) {
    this.enableReadOnly = enableReadOnly;
  }

  public EndpointForDescribeDBInstancesOutput enableReadWriteSplitting(String enableReadWriteSplitting) {
    this.enableReadWriteSplitting = enableReadWriteSplitting;
    return this;
  }

   /**
   * Get enableReadWriteSplitting
   * @return enableReadWriteSplitting
  **/
  @Schema(description = "")
  public String getEnableReadWriteSplitting() {
    return enableReadWriteSplitting;
  }

  public void setEnableReadWriteSplitting(String enableReadWriteSplitting) {
    this.enableReadWriteSplitting = enableReadWriteSplitting;
  }

  public EndpointForDescribeDBInstancesOutput endpointId(String endpointId) {
    this.endpointId = endpointId;
    return this;
  }

   /**
   * Get endpointId
   * @return endpointId
  **/
  @Schema(description = "")
  public String getEndpointId() {
    return endpointId;
  }

  public void setEndpointId(String endpointId) {
    this.endpointId = endpointId;
  }

  public EndpointForDescribeDBInstancesOutput endpointName(String endpointName) {
    this.endpointName = endpointName;
    return this;
  }

   /**
   * Get endpointName
   * @return endpointName
  **/
  @Schema(description = "")
  public String getEndpointName() {
    return endpointName;
  }

  public void setEndpointName(String endpointName) {
    this.endpointName = endpointName;
  }

  public EndpointForDescribeDBInstancesOutput endpointType(String endpointType) {
    this.endpointType = endpointType;
    return this;
  }

   /**
   * Get endpointType
   * @return endpointType
  **/
  @Schema(description = "")
  public String getEndpointType() {
    return endpointType;
  }

  public void setEndpointType(String endpointType) {
    this.endpointType = endpointType;
  }

  public EndpointForDescribeDBInstancesOutput readOnlyNodeDistributionType(String readOnlyNodeDistributionType) {
    this.readOnlyNodeDistributionType = readOnlyNodeDistributionType;
    return this;
  }

   /**
   * Get readOnlyNodeDistributionType
   * @return readOnlyNodeDistributionType
  **/
  @Schema(description = "")
  public String getReadOnlyNodeDistributionType() {
    return readOnlyNodeDistributionType;
  }

  public void setReadOnlyNodeDistributionType(String readOnlyNodeDistributionType) {
    this.readOnlyNodeDistributionType = readOnlyNodeDistributionType;
  }

  public EndpointForDescribeDBInstancesOutput readOnlyNodeMaxDelayTime(Integer readOnlyNodeMaxDelayTime) {
    this.readOnlyNodeMaxDelayTime = readOnlyNodeMaxDelayTime;
    return this;
  }

   /**
   * Get readOnlyNodeMaxDelayTime
   * @return readOnlyNodeMaxDelayTime
  **/
  @Schema(description = "")
  public Integer getReadOnlyNodeMaxDelayTime() {
    return readOnlyNodeMaxDelayTime;
  }

  public void setReadOnlyNodeMaxDelayTime(Integer readOnlyNodeMaxDelayTime) {
    this.readOnlyNodeMaxDelayTime = readOnlyNodeMaxDelayTime;
  }

  public EndpointForDescribeDBInstancesOutput readOnlyNodeWeight(List<ReadOnlyNodeWeightForDescribeDBInstancesOutput> readOnlyNodeWeight) {
    this.readOnlyNodeWeight = readOnlyNodeWeight;
    return this;
  }

  public EndpointForDescribeDBInstancesOutput addReadOnlyNodeWeightItem(ReadOnlyNodeWeightForDescribeDBInstancesOutput readOnlyNodeWeightItem) {
    if (this.readOnlyNodeWeight == null) {
      this.readOnlyNodeWeight = new ArrayList<ReadOnlyNodeWeightForDescribeDBInstancesOutput>();
    }
    this.readOnlyNodeWeight.add(readOnlyNodeWeightItem);
    return this;
  }

   /**
   * Get readOnlyNodeWeight
   * @return readOnlyNodeWeight
  **/
  @Valid
  @Schema(description = "")
  public List<ReadOnlyNodeWeightForDescribeDBInstancesOutput> getReadOnlyNodeWeight() {
    return readOnlyNodeWeight;
  }

  public void setReadOnlyNodeWeight(List<ReadOnlyNodeWeightForDescribeDBInstancesOutput> readOnlyNodeWeight) {
    this.readOnlyNodeWeight = readOnlyNodeWeight;
  }

  public EndpointForDescribeDBInstancesOutput readWriteMode(String readWriteMode) {
    this.readWriteMode = readWriteMode;
    return this;
  }

   /**
   * Get readWriteMode
   * @return readWriteMode
  **/
  @Schema(description = "")
  public String getReadWriteMode() {
    return readWriteMode;
  }

  public void setReadWriteMode(String readWriteMode) {
    this.readWriteMode = readWriteMode;
  }

  public EndpointForDescribeDBInstancesOutput readWriteProxyConnection(Integer readWriteProxyConnection) {
    this.readWriteProxyConnection = readWriteProxyConnection;
    return this;
  }

   /**
   * Get readWriteProxyConnection
   * @return readWriteProxyConnection
  **/
  @Schema(description = "")
  public Integer getReadWriteProxyConnection() {
    return readWriteProxyConnection;
  }

  public void setReadWriteProxyConnection(Integer readWriteProxyConnection) {
    this.readWriteProxyConnection = readWriteProxyConnection;
  }

  public EndpointForDescribeDBInstancesOutput writeNodeHaltWriting(Boolean writeNodeHaltWriting) {
    this.writeNodeHaltWriting = writeNodeHaltWriting;
    return this;
  }

   /**
   * Get writeNodeHaltWriting
   * @return writeNodeHaltWriting
  **/
  @Schema(description = "")
  public Boolean isWriteNodeHaltWriting() {
    return writeNodeHaltWriting;
  }

  public void setWriteNodeHaltWriting(Boolean writeNodeHaltWriting) {
    this.writeNodeHaltWriting = writeNodeHaltWriting;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointForDescribeDBInstancesOutput endpointForDescribeDBInstancesOutput = (EndpointForDescribeDBInstancesOutput) o;
    return Objects.equals(this.address, endpointForDescribeDBInstancesOutput.address) &&
        Objects.equals(this.autoAddNewNodes, endpointForDescribeDBInstancesOutput.autoAddNewNodes) &&
        Objects.equals(this.description, endpointForDescribeDBInstancesOutput.description) &&
        Objects.equals(this.enableReadOnly, endpointForDescribeDBInstancesOutput.enableReadOnly) &&
        Objects.equals(this.enableReadWriteSplitting, endpointForDescribeDBInstancesOutput.enableReadWriteSplitting) &&
        Objects.equals(this.endpointId, endpointForDescribeDBInstancesOutput.endpointId) &&
        Objects.equals(this.endpointName, endpointForDescribeDBInstancesOutput.endpointName) &&
        Objects.equals(this.endpointType, endpointForDescribeDBInstancesOutput.endpointType) &&
        Objects.equals(this.readOnlyNodeDistributionType, endpointForDescribeDBInstancesOutput.readOnlyNodeDistributionType) &&
        Objects.equals(this.readOnlyNodeMaxDelayTime, endpointForDescribeDBInstancesOutput.readOnlyNodeMaxDelayTime) &&
        Objects.equals(this.readOnlyNodeWeight, endpointForDescribeDBInstancesOutput.readOnlyNodeWeight) &&
        Objects.equals(this.readWriteMode, endpointForDescribeDBInstancesOutput.readWriteMode) &&
        Objects.equals(this.readWriteProxyConnection, endpointForDescribeDBInstancesOutput.readWriteProxyConnection) &&
        Objects.equals(this.writeNodeHaltWriting, endpointForDescribeDBInstancesOutput.writeNodeHaltWriting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, autoAddNewNodes, description, enableReadOnly, enableReadWriteSplitting, endpointId, endpointName, endpointType, readOnlyNodeDistributionType, readOnlyNodeMaxDelayTime, readOnlyNodeWeight, readWriteMode, readWriteProxyConnection, writeNodeHaltWriting);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointForDescribeDBInstancesOutput {\n");
    
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    autoAddNewNodes: ").append(toIndentedString(autoAddNewNodes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enableReadOnly: ").append(toIndentedString(enableReadOnly)).append("\n");
    sb.append("    enableReadWriteSplitting: ").append(toIndentedString(enableReadWriteSplitting)).append("\n");
    sb.append("    endpointId: ").append(toIndentedString(endpointId)).append("\n");
    sb.append("    endpointName: ").append(toIndentedString(endpointName)).append("\n");
    sb.append("    endpointType: ").append(toIndentedString(endpointType)).append("\n");
    sb.append("    readOnlyNodeDistributionType: ").append(toIndentedString(readOnlyNodeDistributionType)).append("\n");
    sb.append("    readOnlyNodeMaxDelayTime: ").append(toIndentedString(readOnlyNodeMaxDelayTime)).append("\n");
    sb.append("    readOnlyNodeWeight: ").append(toIndentedString(readOnlyNodeWeight)).append("\n");
    sb.append("    readWriteMode: ").append(toIndentedString(readWriteMode)).append("\n");
    sb.append("    readWriteProxyConnection: ").append(toIndentedString(readWriteProxyConnection)).append("\n");
    sb.append("    writeNodeHaltWriting: ").append(toIndentedString(writeNodeHaltWriting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
