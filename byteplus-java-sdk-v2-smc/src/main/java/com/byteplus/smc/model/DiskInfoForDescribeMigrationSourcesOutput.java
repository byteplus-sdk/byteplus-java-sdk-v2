/*
 * smc
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.byteplus.smc.model;

import java.util.Objects;
import java.util.Arrays;
import com.byteplus.smc.model.PartitionForDescribeMigrationSourcesOutput;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * DiskInfoForDescribeMigrationSourcesOutput
 */



public class DiskInfoForDescribeMigrationSourcesOutput {
  @SerializedName("DiskIndex")
  private Integer diskIndex = null;

  @SerializedName("DiskName")
  private String diskName = null;

  @SerializedName("DiskSize")
  private Integer diskSize = null;

  @SerializedName("FileSystemFormat")
  private String fileSystemFormat = null;

  @SerializedName("IsSystemDisk")
  private Boolean isSystemDisk = null;

  @SerializedName("Partitions")
  private List<PartitionForDescribeMigrationSourcesOutput> partitions = null;

  public DiskInfoForDescribeMigrationSourcesOutput diskIndex(Integer diskIndex) {
    this.diskIndex = diskIndex;
    return this;
  }

   /**
   * Get diskIndex
   * @return diskIndex
  **/
  @Schema(description = "")
  public Integer getDiskIndex() {
    return diskIndex;
  }

  public void setDiskIndex(Integer diskIndex) {
    this.diskIndex = diskIndex;
  }

  public DiskInfoForDescribeMigrationSourcesOutput diskName(String diskName) {
    this.diskName = diskName;
    return this;
  }

   /**
   * Get diskName
   * @return diskName
  **/
  @Schema(description = "")
  public String getDiskName() {
    return diskName;
  }

  public void setDiskName(String diskName) {
    this.diskName = diskName;
  }

  public DiskInfoForDescribeMigrationSourcesOutput diskSize(Integer diskSize) {
    this.diskSize = diskSize;
    return this;
  }

   /**
   * Get diskSize
   * @return diskSize
  **/
  @Schema(description = "")
  public Integer getDiskSize() {
    return diskSize;
  }

  public void setDiskSize(Integer diskSize) {
    this.diskSize = diskSize;
  }

  public DiskInfoForDescribeMigrationSourcesOutput fileSystemFormat(String fileSystemFormat) {
    this.fileSystemFormat = fileSystemFormat;
    return this;
  }

   /**
   * Get fileSystemFormat
   * @return fileSystemFormat
  **/
  @Schema(description = "")
  public String getFileSystemFormat() {
    return fileSystemFormat;
  }

  public void setFileSystemFormat(String fileSystemFormat) {
    this.fileSystemFormat = fileSystemFormat;
  }

  public DiskInfoForDescribeMigrationSourcesOutput isSystemDisk(Boolean isSystemDisk) {
    this.isSystemDisk = isSystemDisk;
    return this;
  }

   /**
   * Get isSystemDisk
   * @return isSystemDisk
  **/
  @Schema(description = "")
  public Boolean isIsSystemDisk() {
    return isSystemDisk;
  }

  public void setIsSystemDisk(Boolean isSystemDisk) {
    this.isSystemDisk = isSystemDisk;
  }

  public DiskInfoForDescribeMigrationSourcesOutput partitions(List<PartitionForDescribeMigrationSourcesOutput> partitions) {
    this.partitions = partitions;
    return this;
  }

  public DiskInfoForDescribeMigrationSourcesOutput addPartitionsItem(PartitionForDescribeMigrationSourcesOutput partitionsItem) {
    if (this.partitions == null) {
      this.partitions = new ArrayList<PartitionForDescribeMigrationSourcesOutput>();
    }
    this.partitions.add(partitionsItem);
    return this;
  }

   /**
   * Get partitions
   * @return partitions
  **/
  @Valid
  @Schema(description = "")
  public List<PartitionForDescribeMigrationSourcesOutput> getPartitions() {
    return partitions;
  }

  public void setPartitions(List<PartitionForDescribeMigrationSourcesOutput> partitions) {
    this.partitions = partitions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskInfoForDescribeMigrationSourcesOutput diskInfoForDescribeMigrationSourcesOutput = (DiskInfoForDescribeMigrationSourcesOutput) o;
    return Objects.equals(this.diskIndex, diskInfoForDescribeMigrationSourcesOutput.diskIndex) &&
        Objects.equals(this.diskName, diskInfoForDescribeMigrationSourcesOutput.diskName) &&
        Objects.equals(this.diskSize, diskInfoForDescribeMigrationSourcesOutput.diskSize) &&
        Objects.equals(this.fileSystemFormat, diskInfoForDescribeMigrationSourcesOutput.fileSystemFormat) &&
        Objects.equals(this.isSystemDisk, diskInfoForDescribeMigrationSourcesOutput.isSystemDisk) &&
        Objects.equals(this.partitions, diskInfoForDescribeMigrationSourcesOutput.partitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskIndex, diskName, diskSize, fileSystemFormat, isSystemDisk, partitions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskInfoForDescribeMigrationSourcesOutput {\n");
    
    sb.append("    diskIndex: ").append(toIndentedString(diskIndex)).append("\n");
    sb.append("    diskName: ").append(toIndentedString(diskName)).append("\n");
    sb.append("    diskSize: ").append(toIndentedString(diskSize)).append("\n");
    sb.append("    fileSystemFormat: ").append(toIndentedString(fileSystemFormat)).append("\n");
    sb.append("    isSystemDisk: ").append(toIndentedString(isSystemDisk)).append("\n");
    sb.append("    partitions: ").append(toIndentedString(partitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
