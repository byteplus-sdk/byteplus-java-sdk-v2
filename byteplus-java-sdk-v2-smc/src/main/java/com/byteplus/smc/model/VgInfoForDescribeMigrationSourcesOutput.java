/*
 * smc
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.byteplus.smc.model;

import java.util.Objects;
import java.util.Arrays;
import com.byteplus.smc.model.LvInfoForDescribeMigrationSourcesOutput;
import com.byteplus.smc.model.PvInfoForDescribeMigrationSourcesOutput;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * VgInfoForDescribeMigrationSourcesOutput
 */



public class VgInfoForDescribeMigrationSourcesOutput {
  @SerializedName("Format")
  private String format = null;

  @SerializedName("LvInfos")
  private List<LvInfoForDescribeMigrationSourcesOutput> lvInfos = null;

  @SerializedName("PvInfos")
  private List<PvInfoForDescribeMigrationSourcesOutput> pvInfos = null;

  @SerializedName("VgName")
  private String vgName = null;

  @SerializedName("VgSize")
  private Long vgSize = null;

  @SerializedName("VgUUID")
  private String vgUUID = null;

  public VgInfoForDescribeMigrationSourcesOutput format(String format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @Schema(description = "")
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }

  public VgInfoForDescribeMigrationSourcesOutput lvInfos(List<LvInfoForDescribeMigrationSourcesOutput> lvInfos) {
    this.lvInfos = lvInfos;
    return this;
  }

  public VgInfoForDescribeMigrationSourcesOutput addLvInfosItem(LvInfoForDescribeMigrationSourcesOutput lvInfosItem) {
    if (this.lvInfos == null) {
      this.lvInfos = new ArrayList<LvInfoForDescribeMigrationSourcesOutput>();
    }
    this.lvInfos.add(lvInfosItem);
    return this;
  }

   /**
   * Get lvInfos
   * @return lvInfos
  **/
  @Valid
  @Schema(description = "")
  public List<LvInfoForDescribeMigrationSourcesOutput> getLvInfos() {
    return lvInfos;
  }

  public void setLvInfos(List<LvInfoForDescribeMigrationSourcesOutput> lvInfos) {
    this.lvInfos = lvInfos;
  }

  public VgInfoForDescribeMigrationSourcesOutput pvInfos(List<PvInfoForDescribeMigrationSourcesOutput> pvInfos) {
    this.pvInfos = pvInfos;
    return this;
  }

  public VgInfoForDescribeMigrationSourcesOutput addPvInfosItem(PvInfoForDescribeMigrationSourcesOutput pvInfosItem) {
    if (this.pvInfos == null) {
      this.pvInfos = new ArrayList<PvInfoForDescribeMigrationSourcesOutput>();
    }
    this.pvInfos.add(pvInfosItem);
    return this;
  }

   /**
   * Get pvInfos
   * @return pvInfos
  **/
  @Valid
  @Schema(description = "")
  public List<PvInfoForDescribeMigrationSourcesOutput> getPvInfos() {
    return pvInfos;
  }

  public void setPvInfos(List<PvInfoForDescribeMigrationSourcesOutput> pvInfos) {
    this.pvInfos = pvInfos;
  }

  public VgInfoForDescribeMigrationSourcesOutput vgName(String vgName) {
    this.vgName = vgName;
    return this;
  }

   /**
   * Get vgName
   * @return vgName
  **/
  @Schema(description = "")
  public String getVgName() {
    return vgName;
  }

  public void setVgName(String vgName) {
    this.vgName = vgName;
  }

  public VgInfoForDescribeMigrationSourcesOutput vgSize(Long vgSize) {
    this.vgSize = vgSize;
    return this;
  }

   /**
   * Get vgSize
   * @return vgSize
  **/
  @Schema(description = "")
  public Long getVgSize() {
    return vgSize;
  }

  public void setVgSize(Long vgSize) {
    this.vgSize = vgSize;
  }

  public VgInfoForDescribeMigrationSourcesOutput vgUUID(String vgUUID) {
    this.vgUUID = vgUUID;
    return this;
  }

   /**
   * Get vgUUID
   * @return vgUUID
  **/
  @Schema(description = "")
  public String getVgUUID() {
    return vgUUID;
  }

  public void setVgUUID(String vgUUID) {
    this.vgUUID = vgUUID;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VgInfoForDescribeMigrationSourcesOutput vgInfoForDescribeMigrationSourcesOutput = (VgInfoForDescribeMigrationSourcesOutput) o;
    return Objects.equals(this.format, vgInfoForDescribeMigrationSourcesOutput.format) &&
        Objects.equals(this.lvInfos, vgInfoForDescribeMigrationSourcesOutput.lvInfos) &&
        Objects.equals(this.pvInfos, vgInfoForDescribeMigrationSourcesOutput.pvInfos) &&
        Objects.equals(this.vgName, vgInfoForDescribeMigrationSourcesOutput.vgName) &&
        Objects.equals(this.vgSize, vgInfoForDescribeMigrationSourcesOutput.vgSize) &&
        Objects.equals(this.vgUUID, vgInfoForDescribeMigrationSourcesOutput.vgUUID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, lvInfos, pvInfos, vgName, vgSize, vgUUID);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VgInfoForDescribeMigrationSourcesOutput {\n");
    
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    lvInfos: ").append(toIndentedString(lvInfos)).append("\n");
    sb.append("    pvInfos: ").append(toIndentedString(pvInfos)).append("\n");
    sb.append("    vgName: ").append(toIndentedString(vgName)).append("\n");
    sb.append("    vgSize: ").append(toIndentedString(vgSize)).append("\n");
    sb.append("    vgUUID: ").append(toIndentedString(vgUUID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
