/*
 * smc
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.byteplus.smc.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * SystemInfoForDescribeMigrationSourcesOutput
 */



public class SystemInfoForDescribeMigrationSourcesOutput {
  @SerializedName("Architecture")
  private String architecture = null;

  @SerializedName("CPU")
  private Integer CPU = null;

  @SerializedName("CPUUsage")
  private Float cpUUsage = null;

  @SerializedName("Memory")
  private Long memory = null;

  @SerializedName("MemoryUsage")
  private Float memoryUsage = null;

  public SystemInfoForDescribeMigrationSourcesOutput architecture(String architecture) {
    this.architecture = architecture;
    return this;
  }

   /**
   * Get architecture
   * @return architecture
  **/
  @Schema(description = "")
  public String getArchitecture() {
    return architecture;
  }

  public void setArchitecture(String architecture) {
    this.architecture = architecture;
  }

  public SystemInfoForDescribeMigrationSourcesOutput CPU(Integer CPU) {
    this.CPU = CPU;
    return this;
  }

   /**
   * Get CPU
   * @return CPU
  **/
  @Schema(description = "")
  public Integer getCPU() {
    return CPU;
  }

  public void setCPU(Integer CPU) {
    this.CPU = CPU;
  }

  public SystemInfoForDescribeMigrationSourcesOutput cpUUsage(Float cpUUsage) {
    this.cpUUsage = cpUUsage;
    return this;
  }

   /**
   * Get cpUUsage
   * @return cpUUsage
  **/
  @Schema(description = "")
  public Float getCpUUsage() {
    return cpUUsage;
  }

  public void setCpUUsage(Float cpUUsage) {
    this.cpUUsage = cpUUsage;
  }

  public SystemInfoForDescribeMigrationSourcesOutput memory(Long memory) {
    this.memory = memory;
    return this;
  }

   /**
   * Get memory
   * @return memory
  **/
  @Schema(description = "")
  public Long getMemory() {
    return memory;
  }

  public void setMemory(Long memory) {
    this.memory = memory;
  }

  public SystemInfoForDescribeMigrationSourcesOutput memoryUsage(Float memoryUsage) {
    this.memoryUsage = memoryUsage;
    return this;
  }

   /**
   * Get memoryUsage
   * @return memoryUsage
  **/
  @Schema(description = "")
  public Float getMemoryUsage() {
    return memoryUsage;
  }

  public void setMemoryUsage(Float memoryUsage) {
    this.memoryUsage = memoryUsage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemInfoForDescribeMigrationSourcesOutput systemInfoForDescribeMigrationSourcesOutput = (SystemInfoForDescribeMigrationSourcesOutput) o;
    return Objects.equals(this.architecture, systemInfoForDescribeMigrationSourcesOutput.architecture) &&
        Objects.equals(this.CPU, systemInfoForDescribeMigrationSourcesOutput.CPU) &&
        Objects.equals(this.cpUUsage, systemInfoForDescribeMigrationSourcesOutput.cpUUsage) &&
        Objects.equals(this.memory, systemInfoForDescribeMigrationSourcesOutput.memory) &&
        Objects.equals(this.memoryUsage, systemInfoForDescribeMigrationSourcesOutput.memoryUsage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(architecture, CPU, cpUUsage, memory, memoryUsage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemInfoForDescribeMigrationSourcesOutput {\n");
    
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    CPU: ").append(toIndentedString(CPU)).append("\n");
    sb.append("    cpUUsage: ").append(toIndentedString(cpUUsage)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    memoryUsage: ").append(toIndentedString(memoryUsage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
