/*
 * ark
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.byteplus.ark.model;

import java.util.Objects;
import java.util.Arrays;
import com.byteplus.ark.model.LogitBiasForContextChatCompletionsInput;
import com.byteplus.ark.model.MessagesForContextChatCompletionsInput;
import com.byteplus.ark.model.StreamOptionsForContextChatCompletionsInput;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * ContextChatCompletionsRequest
 */



public class ContextChatCompletionsRequest {
  @SerializedName("context_id")
  private String contextId = null;

  @SerializedName("frequency_penalty")
  private Float frequencyPenalty = null;

  @SerializedName("logit_bias")
  private LogitBiasForContextChatCompletionsInput logitBias = null;

  @SerializedName("logprobs")
  private Boolean logprobs = null;

  @SerializedName("max_tokens")
  private Integer maxTokens = null;

  @SerializedName("messages")
  private MessagesForContextChatCompletionsInput messages = null;

  @SerializedName("model")
  private String model = null;

  @SerializedName("presence_penalty")
  private Float presencePenalty = null;

  @SerializedName("stop")
  private List<String> stop = null;

  @SerializedName("stream")
  private Boolean stream = null;

  @SerializedName("stream_options")
  private StreamOptionsForContextChatCompletionsInput streamOptions = null;

  @SerializedName("temperature")
  private Float temperature = null;

  @SerializedName("top_logprobs")
  private Integer topLogprobs = null;

  @SerializedName("top_p")
  private Float topP = null;

  public ContextChatCompletionsRequest contextId(String contextId) {
    this.contextId = contextId;
    return this;
  }

   /**
   * Get contextId
   * @return contextId
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getContextId() {
    return contextId;
  }

  public void setContextId(String contextId) {
    this.contextId = contextId;
  }

  public ContextChatCompletionsRequest frequencyPenalty(Float frequencyPenalty) {
    this.frequencyPenalty = frequencyPenalty;
    return this;
  }

   /**
   * Get frequencyPenalty
   * @return frequencyPenalty
  **/
  @Schema(description = "")
  public Float getFrequencyPenalty() {
    return frequencyPenalty;
  }

  public void setFrequencyPenalty(Float frequencyPenalty) {
    this.frequencyPenalty = frequencyPenalty;
  }

  public ContextChatCompletionsRequest logitBias(LogitBiasForContextChatCompletionsInput logitBias) {
    this.logitBias = logitBias;
    return this;
  }

   /**
   * Get logitBias
   * @return logitBias
  **/
  @Valid
  @Schema(description = "")
  public LogitBiasForContextChatCompletionsInput getLogitBias() {
    return logitBias;
  }

  public void setLogitBias(LogitBiasForContextChatCompletionsInput logitBias) {
    this.logitBias = logitBias;
  }

  public ContextChatCompletionsRequest logprobs(Boolean logprobs) {
    this.logprobs = logprobs;
    return this;
  }

   /**
   * Get logprobs
   * @return logprobs
  **/
  @Schema(description = "")
  public Boolean isLogprobs() {
    return logprobs;
  }

  public void setLogprobs(Boolean logprobs) {
    this.logprobs = logprobs;
  }

  public ContextChatCompletionsRequest maxTokens(Integer maxTokens) {
    this.maxTokens = maxTokens;
    return this;
  }

   /**
   * Get maxTokens
   * @return maxTokens
  **/
  @Schema(description = "")
  public Integer getMaxTokens() {
    return maxTokens;
  }

  public void setMaxTokens(Integer maxTokens) {
    this.maxTokens = maxTokens;
  }

  public ContextChatCompletionsRequest messages(MessagesForContextChatCompletionsInput messages) {
    this.messages = messages;
    return this;
  }

   /**
   * Get messages
   * @return messages
  **/
  @Valid
  @Schema(description = "")
  public MessagesForContextChatCompletionsInput getMessages() {
    return messages;
  }

  public void setMessages(MessagesForContextChatCompletionsInput messages) {
    this.messages = messages;
  }

  public ContextChatCompletionsRequest model(String model) {
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @NotNull
  @Schema(required = true, description = "")
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }

  public ContextChatCompletionsRequest presencePenalty(Float presencePenalty) {
    this.presencePenalty = presencePenalty;
    return this;
  }

   /**
   * Get presencePenalty
   * @return presencePenalty
  **/
  @Schema(description = "")
  public Float getPresencePenalty() {
    return presencePenalty;
  }

  public void setPresencePenalty(Float presencePenalty) {
    this.presencePenalty = presencePenalty;
  }

  public ContextChatCompletionsRequest stop(List<String> stop) {
    this.stop = stop;
    return this;
  }

  public ContextChatCompletionsRequest addStopItem(String stopItem) {
    if (this.stop == null) {
      this.stop = new ArrayList<String>();
    }
    this.stop.add(stopItem);
    return this;
  }

   /**
   * Get stop
   * @return stop
  **/
  @Schema(description = "")
  public List<String> getStop() {
    return stop;
  }

  public void setStop(List<String> stop) {
    this.stop = stop;
  }

  public ContextChatCompletionsRequest stream(Boolean stream) {
    this.stream = stream;
    return this;
  }

   /**
   * Get stream
   * @return stream
  **/
  @Schema(description = "")
  public Boolean isStream() {
    return stream;
  }

  public void setStream(Boolean stream) {
    this.stream = stream;
  }

  public ContextChatCompletionsRequest streamOptions(StreamOptionsForContextChatCompletionsInput streamOptions) {
    this.streamOptions = streamOptions;
    return this;
  }

   /**
   * Get streamOptions
   * @return streamOptions
  **/
  @Valid
  @Schema(description = "")
  public StreamOptionsForContextChatCompletionsInput getStreamOptions() {
    return streamOptions;
  }

  public void setStreamOptions(StreamOptionsForContextChatCompletionsInput streamOptions) {
    this.streamOptions = streamOptions;
  }

  public ContextChatCompletionsRequest temperature(Float temperature) {
    this.temperature = temperature;
    return this;
  }

   /**
   * Get temperature
   * @return temperature
  **/
  @Schema(description = "")
  public Float getTemperature() {
    return temperature;
  }

  public void setTemperature(Float temperature) {
    this.temperature = temperature;
  }

  public ContextChatCompletionsRequest topLogprobs(Integer topLogprobs) {
    this.topLogprobs = topLogprobs;
    return this;
  }

   /**
   * Get topLogprobs
   * @return topLogprobs
  **/
  @Schema(description = "")
  public Integer getTopLogprobs() {
    return topLogprobs;
  }

  public void setTopLogprobs(Integer topLogprobs) {
    this.topLogprobs = topLogprobs;
  }

  public ContextChatCompletionsRequest topP(Float topP) {
    this.topP = topP;
    return this;
  }

   /**
   * Get topP
   * @return topP
  **/
  @Schema(description = "")
  public Float getTopP() {
    return topP;
  }

  public void setTopP(Float topP) {
    this.topP = topP;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContextChatCompletionsRequest contextChatCompletionsRequest = (ContextChatCompletionsRequest) o;
    return Objects.equals(this.contextId, contextChatCompletionsRequest.contextId) &&
        Objects.equals(this.frequencyPenalty, contextChatCompletionsRequest.frequencyPenalty) &&
        Objects.equals(this.logitBias, contextChatCompletionsRequest.logitBias) &&
        Objects.equals(this.logprobs, contextChatCompletionsRequest.logprobs) &&
        Objects.equals(this.maxTokens, contextChatCompletionsRequest.maxTokens) &&
        Objects.equals(this.messages, contextChatCompletionsRequest.messages) &&
        Objects.equals(this.model, contextChatCompletionsRequest.model) &&
        Objects.equals(this.presencePenalty, contextChatCompletionsRequest.presencePenalty) &&
        Objects.equals(this.stop, contextChatCompletionsRequest.stop) &&
        Objects.equals(this.stream, contextChatCompletionsRequest.stream) &&
        Objects.equals(this.streamOptions, contextChatCompletionsRequest.streamOptions) &&
        Objects.equals(this.temperature, contextChatCompletionsRequest.temperature) &&
        Objects.equals(this.topLogprobs, contextChatCompletionsRequest.topLogprobs) &&
        Objects.equals(this.topP, contextChatCompletionsRequest.topP);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contextId, frequencyPenalty, logitBias, logprobs, maxTokens, messages, model, presencePenalty, stop, stream, streamOptions, temperature, topLogprobs, topP);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContextChatCompletionsRequest {\n");
    
    sb.append("    contextId: ").append(toIndentedString(contextId)).append("\n");
    sb.append("    frequencyPenalty: ").append(toIndentedString(frequencyPenalty)).append("\n");
    sb.append("    logitBias: ").append(toIndentedString(logitBias)).append("\n");
    sb.append("    logprobs: ").append(toIndentedString(logprobs)).append("\n");
    sb.append("    maxTokens: ").append(toIndentedString(maxTokens)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    presencePenalty: ").append(toIndentedString(presencePenalty)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    streamOptions: ").append(toIndentedString(streamOptions)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    topLogprobs: ").append(toIndentedString(topLogprobs)).append("\n");
    sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
