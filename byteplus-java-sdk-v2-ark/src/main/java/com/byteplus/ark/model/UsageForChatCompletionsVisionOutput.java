/*
 * ark
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: common-version
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.byteplus.ark.model;

import java.util.Objects;
import java.util.Arrays;
import com.byteplus.ark.model.PromptTokensDetailsForChatCompletionsVisionOutput;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import javax.validation.constraints.*;
import javax.validation.Valid;
/**
 * UsageForChatCompletionsVisionOutput
 */



public class UsageForChatCompletionsVisionOutput {
  @SerializedName("completion_tokens")
  private Integer completionTokens = null;

  @SerializedName("prompt_tokens")
  private Integer promptTokens = null;

  @SerializedName("prompt_tokens_details")
  private PromptTokensDetailsForChatCompletionsVisionOutput promptTokensDetails = null;

  @SerializedName("total_tokens")
  private Integer totalTokens = null;

  public UsageForChatCompletionsVisionOutput completionTokens(Integer completionTokens) {
    this.completionTokens = completionTokens;
    return this;
  }

   /**
   * Get completionTokens
   * @return completionTokens
  **/
  @Schema(description = "")
  public Integer getCompletionTokens() {
    return completionTokens;
  }

  public void setCompletionTokens(Integer completionTokens) {
    this.completionTokens = completionTokens;
  }

  public UsageForChatCompletionsVisionOutput promptTokens(Integer promptTokens) {
    this.promptTokens = promptTokens;
    return this;
  }

   /**
   * Get promptTokens
   * @return promptTokens
  **/
  @Schema(description = "")
  public Integer getPromptTokens() {
    return promptTokens;
  }

  public void setPromptTokens(Integer promptTokens) {
    this.promptTokens = promptTokens;
  }

  public UsageForChatCompletionsVisionOutput promptTokensDetails(PromptTokensDetailsForChatCompletionsVisionOutput promptTokensDetails) {
    this.promptTokensDetails = promptTokensDetails;
    return this;
  }

   /**
   * Get promptTokensDetails
   * @return promptTokensDetails
  **/
  @Valid
  @Schema(description = "")
  public PromptTokensDetailsForChatCompletionsVisionOutput getPromptTokensDetails() {
    return promptTokensDetails;
  }

  public void setPromptTokensDetails(PromptTokensDetailsForChatCompletionsVisionOutput promptTokensDetails) {
    this.promptTokensDetails = promptTokensDetails;
  }

  public UsageForChatCompletionsVisionOutput totalTokens(Integer totalTokens) {
    this.totalTokens = totalTokens;
    return this;
  }

   /**
   * Get totalTokens
   * @return totalTokens
  **/
  @Schema(description = "")
  public Integer getTotalTokens() {
    return totalTokens;
  }

  public void setTotalTokens(Integer totalTokens) {
    this.totalTokens = totalTokens;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageForChatCompletionsVisionOutput usageForChatCompletionsVisionOutput = (UsageForChatCompletionsVisionOutput) o;
    return Objects.equals(this.completionTokens, usageForChatCompletionsVisionOutput.completionTokens) &&
        Objects.equals(this.promptTokens, usageForChatCompletionsVisionOutput.promptTokens) &&
        Objects.equals(this.promptTokensDetails, usageForChatCompletionsVisionOutput.promptTokensDetails) &&
        Objects.equals(this.totalTokens, usageForChatCompletionsVisionOutput.totalTokens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionTokens, promptTokens, promptTokensDetails, totalTokens);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageForChatCompletionsVisionOutput {\n");
    
    sb.append("    completionTokens: ").append(toIndentedString(completionTokens)).append("\n");
    sb.append("    promptTokens: ").append(toIndentedString(promptTokens)).append("\n");
    sb.append("    promptTokensDetails: ").append(toIndentedString(promptTokensDetails)).append("\n");
    sb.append("    totalTokens: ").append(toIndentedString(totalTokens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
